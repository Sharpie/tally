#!/usr/bin/env ruby
#--
# Author:: James Turnbull (<james@lovedthanlost.net>)
# Copyright:: Copyright (c) 2011 James Turnbull
# License:: Apache License, Version 2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

$:.unshift(File.expand_path(File.join(File.dirname(__FILE__), "..", "lib")))

require 'rubygems'
require 'optparse'
require 'tally/client'
require 'tally/version'

options = {}

optparse = OptionParser.new do |opts|
  # Set a banner, displayed at the top
  # of the help screen.
  opts.banner = 'Usage: tally-submit [options] ...'

  opts.separator ''
  opts.separator 'Configuration options:'

  options[:server] = "http://localhost:4567/tally"
  opts.on( '-s', '--server SERVER', 'The server address for Tally.') { |server|
    options[:server] = server
  }

  opts.on( '-f', '--first FIRST', 'The first name of the user to submit.') { |first|
    options[:first] = first
  }

  opts.on( '-l', '--last LAST', 'The last name of the user to submit.') { |last|
    options[:last] = last
  }

  opts.on( '-e', '--email EMAIL', 'The email to submit.') { |email|
    options[:email] = email
  }

  opts.on_tail( '-v', '--version', 'Show version') do
    puts "Tally client version #{Tally::Version::VERSION}"
    exit
  end

  opts.separator ""
  opts.separator "Common options:"

  opts.on_tail('-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
end

begin
  optparse.parse!
  mandatory = [:first, :last, :email]
  missing = mandatory.select{ |param| options[param].nil? }
  if not missing.empty?
    puts "Missing options: #{missing.join(', ')}"
    puts optparse
    exit
  end
  Tally::Client.new(options)
rescue OptionParser::InvalidArgument, OptionParser::InvalidOption, OptionParser::MissingArgument
  puts $!.to_s
  puts optparse
  exit
end
